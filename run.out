/Users/remywang/metalift/txl/stng/allbench//advection.f90
      do c = 1, number_of_chunks
        advec_cell_driver (c, sweep_number, direction)
      end do
haha 
      do c = 1, number_of_chunks
        advec_mom_driver (c, xvel, direction, sweep_number)
      end do
haha 
      do c = 1, number_of_chunks
        advec_mom_driver (c, yvel, direction, sweep_number)
      end do
haha 
      do c = 1, number_of_chunks
        advec_cell_driver (c, sweep_number, direction)
      end do
haha 
      do c = 1, number_of_chunks
        advec_mom_driver (c, xvel, direction, sweep_number)
      end do
haha 
      do c = 1, number_of_chunks
        advec_mom_driver (c, yvel, direction, sweep_number)
      end do
haha 
matches6
/Users/remywang/metalift/txl/stng/allbench//viscosity_kernel.f90
      do k = y_min, y_max
        do j = x_min, x_max
          ugrad = ((xvel0((j + 1), k) + xvel0((j + 1), (k + 1))) - (xvel0(j, k) + xvel0(j, (k + 1))))
          vgrad = ((yvel0(j, (k + 1)) + yvel0((j + 1), (k + 1))) - (yvel0(j, k) + yvel0((j + 1), k)))
          div = ((celldx(j) * ugrad) + (celldy(k) * vgrad))
          strain2 = (((0.5 * (((xvel0(j, (k + 1)) + xvel0((j + 1), (k + 1))) - xvel0(j, k)) - xvel0((j + 1), k))) / celldy(k)) + ((0.5 * (((yvel0((j + 1), k) + yvel0((j + 1), (k + 1))) - yvel0(j, k)) - yvel0(j, (k + 1)))) / celldx(j)))
          pgradx = ((pressure((j + 1), k) - pressure((j - 1), k)) / (celldx(j) + celldx((j + 1))))
          pgrady = ((pressure(j, (k + 1)) - pressure(j, (k - 1))) / (celldy(k) + celldy((k + 1))))
          pgradx2 = (pgradx * pgradx)
          pgrady2 = (pgrady * pgrady)
          limiter = ((((((0.5 * ugrad) / celldx(j)) * pgradx2) + (((0.5 * vgrad) / celldy(k)) * pgrady2)) + ((strain2 * pgradx) * pgrady)) / max((pgradx2 + pgrady2), 1.0e-16))
          if (((limiter > 0.0) .or. (div >= 0.0))) then
            viscosity(j, k) = 0.0
          else
            dirx = 1.0
            if ((pgradx < 0.0)) dirx = - 1.0
            pgradx = (dirx * max(1.0e-16, abs(pgradx)))
            diry = 1.0
            if ((pgradx < 0.0)) diry = - 1.0
            pgrady = (diry * max(1.0e-16, abs(pgrady)))
            pgrad = sqrt(((pgradx ** 2) + (pgrady ** 2)))
            xgrad = abs(((celldx(j) * pgrad) / pgradx))
            ygrad = abs(((celldy(k) * pgrad) / pgrady))
            grad = min(xgrad, ygrad)
            grad2 = (grad * grad)
            viscosity(j, k) = ((((2.0 * density0(j, k)) * grad2) * limiter) * limiter)
          end if
        end do
      end do
haha 
matches1
/Users/remywang/metalift/txl/stng/allbench//update_halo_kernel.f90
      do j = (x_min - depth), (x_max + depth)
        do k = 1, depth
          density0(j, (1 - k)) = density0(j, (0 + k))
        end do
      end do
haha 
      do k = 1, depth
        density0(j, (1 - k)) = density0(j, (0 + k))
      end do
haha 
      do j = (x_min - depth), (x_max + depth)
        do k = 1, depth
          density0(j, (y_max + k)) = density0(j, ((y_max + 1) - k))
        end do
      end do
haha 
      do k = 1, depth
        density0(j, (y_max + k)) = density0(j, ((y_max + 1) - k))
      end do
haha 
      do k = (y_min - depth), (y_max + depth)
        do j = 1, depth
          density0((1 - j), k) = density0((0 + j), k)
        end do
      end do
haha 
      do j = 1, depth
        density0((1 - j), k) = density0((0 + j), k)
      end do
haha 
      do k = (y_min - depth), (y_max + depth)
        do j = 1, depth
          density0((x_max + j), k) = density0(((x_max + 1) - j), k)
        end do
      end do
haha 
      do j = 1, depth
        density0((x_max + j), k) = density0(((x_max + 1) - j), k)
      end do
haha 
      do j = (x_min - depth), (x_max + depth)
        do k = 1, depth
          density1(j, (1 - k)) = density1(j, (0 + k))
        end do
      end do
haha 
      do k = 1, depth
        density1(j, (1 - k)) = density1(j, (0 + k))
      end do
haha 
      do j = (x_min - depth), (x_max + depth)
        do k = 1, depth
          density1(j, (y_max + k)) = density1(j, ((y_max + 1) - k))
        end do
      end do
haha 
      do k = 1, depth
        density1(j, (y_max + k)) = density1(j, ((y_max + 1) - k))
      end do
haha 
      do k = (y_min - depth), (y_max + depth)
        do j = 1, depth
          density1((1 - j), k) = density1((0 + j), k)
        end do
      end do
haha 
      do j = 1, depth
        density1((1 - j), k) = density1((0 + j), k)
      end do
haha 
      do k = (y_min - depth), (y_max + depth)
        do j = 1, depth
          density1((x_max + j), k) = density1(((x_max + 1) - j), k)
        end do
      end do
haha 
      do j = 1, depth
        density1((x_max + j), k) = density1(((x_max + 1) - j), k)
      end do
haha 
      do j = (x_min - depth), (x_max + depth)
        do k = 1, depth
          energy0(j, (1 - k)) = energy0(j, (0 + k))
        end do
      end do
haha 
      do k = 1, depth
        energy0(j, (1 - k)) = energy0(j, (0 + k))
      end do
haha 
      do j = (x_min - depth), (x_max + depth)
        do k = 1, depth
          energy0(j, (y_max + k)) = energy0(j, ((y_max + 1) - k))
        end do
      end do
haha 
      do k = 1, depth
        energy0(j, (y_max + k)) = energy0(j, ((y_max + 1) - k))
      end do
haha 
      do k = (y_min - depth), (y_max + depth)
        do j = 1, depth
          energy0((1 - j), k) = energy0((0 + j), k)
        end do
      end do
haha 
      do j = 1, depth
        energy0((1 - j), k) = energy0((0 + j), k)
      end do
haha 
      do k = (y_min - depth), (y_max + depth)
        do j = 1, depth
          energy0((x_max + j), k) = energy0(((x_max + 1) - j), k)
        end do
      end do
haha 
      do j = 1, depth
        energy0((x_max + j), k) = energy0(((x_max + 1) - j), k)
      end do
haha 
      do j = (x_min - depth), (x_max + depth)
        do k = 1, depth
          energy1(j, (1 - k)) = energy1(j, (0 + k))
        end do
      end do
haha 
      do k = 1, depth
        energy1(j, (1 - k)) = energy1(j, (0 + k))
      end do
haha 
      do j = (x_min - depth), (x_max + depth)
        do k = 1, depth
          energy1(j, (y_max + k)) = energy1(j, ((y_max + 1) - k))
        end do
      end do
haha 
      do k = 1, depth
        energy1(j, (y_max + k)) = energy1(j, ((y_max + 1) - k))
      end do
haha 
      do k = (y_min - depth), (y_max + depth)
        do j = 1, depth
          energy1((1 - j), k) = energy1((0 + j), k)
        end do
      end do
haha 
      do j = 1, depth
        energy1((1 - j), k) = energy1((0 + j), k)
      end do
haha 
      do k = (y_min - depth), (y_max + depth)
        do j = 1, depth
          energy1((x_max + j), k) = energy1(((x_max + 1) - j), k)
        end do
      end do
haha 
      do j = 1, depth
        energy1((x_max + j), k) = energy1(((x_max + 1) - j), k)
      end do
haha 
      do j = (x_min - depth), (x_max + depth)
        do k = 1, depth
          pressure(j, (1 - k)) = pressure(j, (0 + k))
        end do
      end do
haha 
      do k = 1, depth
        pressure(j, (1 - k)) = pressure(j, (0 + k))
      end do
haha 
      do j = (x_min - depth), (x_max + depth)
        do k = 1, depth
          pressure(j, (y_max + k)) = pressure(j, ((y_max + 1) - k))
        end do
      end do
haha 
      do k = 1, depth
        pressure(j, (y_max + k)) = pressure(j, ((y_max + 1) - k))
      end do
haha 
      do k = (y_min - depth), (y_max + depth)
        do j = 1, depth
          pressure((1 - j), k) = pressure((0 + j), k)
        end do
      end do
haha 
      do j = 1, depth
        pressure((1 - j), k) = pressure((0 + j), k)
      end do
haha 
      do k = (y_min - depth), (y_max + depth)
        do j = 1, depth
          pressure((x_max + j), k) = pressure(((x_max + 1) - j), k)
        end do
      end do
haha 
      do j = 1, depth
        pressure((x_max + j), k) = pressure(((x_max + 1) - j), k)
      end do
haha 
      do j = (x_min - depth), (x_max + depth)
        do k = 1, depth
          viscosity(j, (1 - k)) = viscosity(j, (0 + k))
        end do
      end do
haha 
      do k = 1, depth
        viscosity(j, (1 - k)) = viscosity(j, (0 + k))
      end do
haha 
      do j = (x_min - depth), (x_max + depth)
        do k = 1, depth
          viscosity(j, (y_max + k)) = viscosity(j, ((y_max + 1) - k))
        end do
      end do
haha 
      do k = 1, depth
        viscosity(j, (y_max + k)) = viscosity(j, ((y_max + 1) - k))
      end do
haha 
      do k = (y_min - depth), (y_max + depth)
        do j = 1, depth
          viscosity((1 - j), k) = viscosity((0 + j), k)
        end do
      end do
haha 
      do j = 1, depth
        viscosity((1 - j), k) = viscosity((0 + j), k)
      end do
haha 
      do k = (y_min - depth), (y_max + depth)
        do j = 1, depth
          viscosity((x_max + j), k) = viscosity(((x_max + 1) - j), k)
        end do
      end do
haha 
      do j = 1, depth
        viscosity((x_max + j), k) = viscosity(((x_max + 1) - j), k)
      end do
haha 
      do j = (x_min - depth), (x_max + depth)
        do k = 1, depth
          soundspeed(j, (1 - k)) = soundspeed(j, (0 + k))
        end do
      end do
haha 
      do k = 1, depth
        soundspeed(j, (1 - k)) = soundspeed(j, (0 + k))
      end do
haha 
      do j = (x_min - depth), (x_max + depth)
        do k = 1, depth
          soundspeed(j, (y_max + k)) = soundspeed(j, ((y_max + 1) - k))
        end do
      end do
haha 
      do k = 1, depth
        soundspeed(j, (y_max + k)) = soundspeed(j, ((y_max + 1) - k))
      end do
haha 
      do k = (y_min - depth), (y_max + depth)
        do j = 1, depth
          soundspeed((1 - j), k) = soundspeed((0 + j), k)
        end do
      end do
haha 
      do j = 1, depth
        soundspeed((1 - j), k) = soundspeed((0 + j), k)
      end do
haha 
      do k = (y_min - depth), (y_max + depth)
        do j = 1, depth
          soundspeed((x_max + j), k) = soundspeed(((x_max + 1) - j), k)
        end do
      end do
haha 
      do j = 1, depth
        soundspeed((x_max + j), k) = soundspeed(((x_max + 1) - j), k)
      end do
haha 
      do j = (x_min - depth), ((x_max + 1) + depth)
        do k = 1, depth
          xvel0(j, (1 - k)) = xvel0(j, (1 + k))
        end do
      end do
haha 
      do k = 1, depth
        xvel0(j, (1 - k)) = xvel0(j, (1 + k))
      end do
haha 
      do j = (x_min - depth), ((x_max + 1) + depth)
        do k = 1, depth
          xvel0(j, ((y_max + 1) + k)) = xvel0(j, ((y_max + 1) - k))
        end do
      end do
haha 
      do k = 1, depth
        xvel0(j, ((y_max + 1) + k)) = xvel0(j, ((y_max + 1) - k))
      end do
haha 
      do k = (y_min - depth), ((y_max + 1) + depth)
        do j = 1, depth
          xvel0((1 - j), k) = - xvel0((1 + j), k)
        end do
      end do
haha 
      do j = 1, depth
        xvel0((1 - j), k) = - xvel0((1 + j), k)
      end do
haha 
      do k = (y_min - depth), ((y_max + 1) + depth)
        do j = 1, depth
          xvel0(((x_max + 1) + j), k) = - xvel0(((x_max + 1) - j), k)
        end do
      end do
haha 
      do j = 1, depth
        xvel0(((x_max + 1) + j), k) = - xvel0(((x_max + 1) - j), k)
      end do
haha 
      do j = (x_min - depth), ((x_max + 1) + depth)
        do k = 1, depth
          xvel1(j, (1 - k)) = xvel1(j, (1 + k))
        end do
      end do
haha 
      do k = 1, depth
        xvel1(j, (1 - k)) = xvel1(j, (1 + k))
      end do
haha 
      do j = (x_min - depth), ((x_max + 1) + depth)
        do k = 1, depth
          xvel1(j, ((y_max + 1) + k)) = xvel1(j, ((y_max + 1) - k))
        end do
      end do
haha 
      do k = 1, depth
        xvel1(j, ((y_max + 1) + k)) = xvel1(j, ((y_max + 1) - k))
      end do
haha 
      do k = (y_min - depth), ((y_max + 1) + depth)
        do j = 1, depth
          xvel1((1 - j), k) = - xvel1((1 + j), k)
        end do
      end do
haha 
      do j = 1, depth
        xvel1((1 - j), k) = - xvel1((1 + j), k)
      end do
haha 
      do k = (y_min - depth), ((y_max + 1) + depth)
        do j = 1, depth
          xvel1(((x_max + 1) + j), k) = - xvel1(((x_max + 1) - j), k)
        end do
      end do
haha 
      do j = 1, depth
        xvel1(((x_max + 1) + j), k) = - xvel1(((x_max + 1) - j), k)
      end do
haha 
      do j = (x_min - depth), ((x_max + 1) + depth)
        do k = 1, depth
          yvel0(j, (1 - k)) = - yvel0(j, (1 + k))
        end do
      end do
haha 
      do k = 1, depth
        yvel0(j, (1 - k)) = - yvel0(j, (1 + k))
      end do
haha 
      do j = (x_min - depth), ((x_max + 1) + depth)
        do k = 1, depth
          yvel0(j, ((y_max + 1) + k)) = - yvel0(j, ((y_max + 1) - k))
        end do
      end do
haha 
      do k = 1, depth
        yvel0(j, ((y_max + 1) + k)) = - yvel0(j, ((y_max + 1) - k))
      end do
haha 
      do k = (y_min - depth), ((y_max + 1) + depth)
        do j = 1, depth
          yvel0((1 - j), k) = yvel0((1 + j), k)
        end do
      end do
haha 
      do j = 1, depth
        yvel0((1 - j), k) = yvel0((1 + j), k)
      end do
haha 
      do k = (y_min - depth), ((y_max + 1) + depth)
        do j = 1, depth
          yvel0(((x_max + 1) + j), k) = yvel0(((x_max + 1) - j), k)
        end do
      end do
haha 
      do j = 1, depth
        yvel0(((x_max + 1) + j), k) = yvel0(((x_max + 1) - j), k)
      end do
haha 
      do j = (x_min - depth), ((x_max + 1) + depth)
        do k = 1, depth
          yvel1(j, (1 - k)) = - yvel1(j, (1 + k))
        end do
      end do
haha 
      do k = 1, depth
        yvel1(j, (1 - k)) = - yvel1(j, (1 + k))
      end do
haha 
      do j = (x_min - depth), ((x_max + 1) + depth)
        do k = 1, depth
          yvel1(j, ((y_max + 1) + k)) = - yvel1(j, ((y_max + 1) - k))
        end do
      end do
haha 
      do k = 1, depth
        yvel1(j, ((y_max + 1) + k)) = - yvel1(j, ((y_max + 1) - k))
      end do
haha 
      do k = (y_min - depth), ((y_max + 1) + depth)
        do j = 1, depth
          yvel1((1 - j), k) = yvel1((1 + j), k)
        end do
      end do
haha 
      do j = 1, depth
        yvel1((1 - j), k) = yvel1((1 + j), k)
      end do
haha 
      do k = (y_min - depth), ((y_max + 1) + depth)
        do j = 1, depth
          yvel1(((x_max + 1) + j), k) = yvel1(((x_max + 1) - j), k)
        end do
      end do
haha 
      do j = 1, depth
        yvel1(((x_max + 1) + j), k) = yvel1(((x_max + 1) - j), k)
      end do
haha 
      do j = (x_min - depth), ((x_max + 1) + depth)
        do k = 1, depth
          vol_flux_x(j, (1 - k)) = vol_flux_x(j, (1 + k))
        end do
      end do
haha 
      do k = 1, depth
        vol_flux_x(j, (1 - k)) = vol_flux_x(j, (1 + k))
      end do
haha 
      do j = (x_min - depth), ((x_max + 1) + depth)
        do k = 1, depth
          vol_flux_x(j, (y_max + k)) = vol_flux_x(j, (y_max - k))
        end do
      end do
haha 
      do k = 1, depth
        vol_flux_x(j, (y_max + k)) = vol_flux_x(j, (y_max - k))
      end do
haha 
      do k = (y_min - depth), (y_max + depth)
        do j = 1, depth
          vol_flux_x((1 - j), k) = - vol_flux_x((1 + j), k)
        end do
      end do
haha 
      do j = 1, depth
        vol_flux_x((1 - j), k) = - vol_flux_x((1 + j), k)
      end do
haha 
      do k = (y_min - depth), (y_max + depth)
        do j = 1, depth
          vol_flux_x(((x_max + j) + 1), k) = - vol_flux_x(((x_max + 1) - j), k)
        end do
      end do
haha 
      do j = 1, depth
        vol_flux_x(((x_max + j) + 1), k) = - vol_flux_x(((x_max + 1) - j), k)
      end do
haha 
      do j = (x_min - depth), ((x_max + 1) + depth)
        do k = 1, depth
          mass_flux_x(j, (1 - k)) = mass_flux_x(j, (1 + k))
        end do
      end do
haha 
      do k = 1, depth
        mass_flux_x(j, (1 - k)) = mass_flux_x(j, (1 + k))
      end do
haha 
      do j = (x_min - depth), ((x_max + 1) + depth)
        do k = 1, depth
          mass_flux_x(j, (y_max + k)) = mass_flux_x(j, (y_max - k))
        end do
      end do
haha 
      do k = 1, depth
        mass_flux_x(j, (y_max + k)) = mass_flux_x(j, (y_max - k))
      end do
haha 
      do k = (y_min - depth), (y_max + depth)
        do j = 1, depth
          mass_flux_x((1 - j), k) = - mass_flux_x((1 + j), k)
        end do
      end do
haha 
      do j = 1, depth
        mass_flux_x((1 - j), k) = - mass_flux_x((1 + j), k)
      end do
haha 
      do k = (y_min - depth), (y_max + depth)
        do j = 1, depth
          mass_flux_x(((x_max + j) + 1), k) = - mass_flux_x(((x_max + 1) - j), k)
        end do
      end do
haha 
      do j = 1, depth
        mass_flux_x(((x_max + j) + 1), k) = - mass_flux_x(((x_max + 1) - j), k)
      end do
haha 
      do j = (x_min - depth), (x_max + depth)
        do k = 1, depth
          vol_flux_y(j, (1 - k)) = - vol_flux_y(j, (1 + k))
        end do
      end do
haha 
      do k = 1, depth
        vol_flux_y(j, (1 - k)) = - vol_flux_y(j, (1 + k))
      end do
haha 
      do j = (x_min - depth), (x_max + depth)
        do k = 1, depth
          vol_flux_y(j, ((y_max + k) + 1)) = - vol_flux_y(j, ((y_max + 1) - k))
        end do
      end do
haha 
      do k = 1, depth
        vol_flux_y(j, ((y_max + k) + 1)) = - vol_flux_y(j, ((y_max + 1) - k))
      end do
haha 
      do k = (y_min - depth), ((y_max + 1) + depth)
        do j = 1, depth
          vol_flux_y((1 - j), k) = vol_flux_y((1 + j), k)
        end do
      end do
haha 
      do j = 1, depth
        vol_flux_y((1 - j), k) = vol_flux_y((1 + j), k)
      end do
haha 
      do k = (y_min - depth), ((y_max + 1) + depth)
        do j = 1, depth
          vol_flux_y((x_max + j), k) = vol_flux_y((x_max - j), k)
        end do
      end do
haha 
      do j = 1, depth
        vol_flux_y((x_max + j), k) = vol_flux_y((x_max - j), k)
      end do
haha 
      do j = (x_min - depth), (x_max + depth)
        do k = 1, depth
          mass_flux_y(j, (1 - k)) = - mass_flux_y(j, (1 + k))
        end do
      end do
haha 
      do k = 1, depth
        mass_flux_y(j, (1 - k)) = - mass_flux_y(j, (1 + k))
      end do
haha 
      do j = (x_min - depth), (x_max + depth)
        do k = 1, depth
          mass_flux_y(j, ((y_max + k) + 1)) = - mass_flux_y(j, ((y_max + 1) - k))
        end do
      end do
haha 
      do k = 1, depth
        mass_flux_y(j, ((y_max + k) + 1)) = - mass_flux_y(j, ((y_max + 1) - k))
      end do
haha 
      do k = (y_min - depth), ((y_max + 1) + depth)
        do j = 1, depth
          mass_flux_y((1 - j), k) = mass_flux_y((1 + j), k)
        end do
      end do
haha 
      do j = 1, depth
        mass_flux_y((1 - j), k) = mass_flux_y((1 + j), k)
      end do
haha 
      do k = (y_min - depth), ((y_max + 1) + depth)
        do j = 1, depth
          mass_flux_y((x_max + j), k) = mass_flux_y((x_max - j), k)
        end do
      end do
haha 
      do j = 1, depth
        mass_flux_y((x_max + j), k) = mass_flux_y((x_max - j), k)
      end do
haha 
matches120
/Users/remywang/metalift/txl/stng/allbench//flux_calc.f90
      do c = 1, number_of_chunks
        if ((chunks(c) % task == parallel % task)) then
          if (use_fortran_kernels) then
            flux_calc_kernel (chunks(c) % field % x_min, chunks(c) % field % x_max, chunks(c) % field % y_min, chunks(c) % field % y_max, dt, chunks(c) % field % xarea, chunks(c) % field % yarea, chunks(c) % field % xvel0, chunks(c) % field % yvel0, chunks(c) % field % xvel1, chunks(c) % field % yvel1, chunks(c) % field % vol_flux_x, chunks(c) % field % vol_flux_y)
          else if (use_c_kernels) then
            flux_calc_kernel_c (chunks(c) % field % x_min, chunks(c) % field % x_max, chunks(c) % field % y_min, chunks(c) % field % y_max, dt, chunks(c) % field % xarea, chunks(c) % field % yarea, chunks(c) % field % xvel0, chunks(c) % field % yvel0, chunks(c) % field % xvel1, chunks(c) % field % yvel1, chunks(c) % field % vol_flux_x, chunks(c) % field % vol_flux_y)
          end if
        end if
      end do
haha 
matches1
/Users/remywang/metalift/txl/stng/allbench//visit.f90
      do c = 1, number_of_chunks
        ideal_gas (c, .false.)
      end do
haha 
      do c = 1, number_of_chunks
        if ((chunks(c) % task == parallel % task)) then
          nxc = ((chunks(c) % field % x_max - chunks(c) % field % x_min) + 1)
          nyc = ((chunks(c) % field % y_max - chunks(c) % field % y_min) + 1)
          nxv = (nxc + 1)
          nyv = (nyc + 1)
          write (chunk_name, '(i6)') (c + 100000)
          chunk_name(1:1) = '.'
          write (step_name, '(i6)') (step + 100000)
          step_name(1:1) = '.'
          filename = (trim((trim(name) // (trim(chunk_name) // trim(step_name)))) // '.vtk')
          u = get_unit(dummy)
          open (unit=u, file=filename, status='unknown', iostat=err)
          write (u, '(a)') '# vtk datafile version 3.0'
          write (u, '(a)') 'vtk output'
          write (u, '(a)') 'ascii'
          write (u, '(a)') 'dataset rectilinear_grid'
          write (u, '(a,2i12,a)') 'dimensions', nxv, nyv, ' 1'
          write (u, '(a,i5,a)') 'x_coordinates ', nxv, ' double'
          do j = chunks(c) % field % x_min, (chunks(c) % field % x_max + 1)
            write (u, '(e12.4)') chunks(c) % field % vertexx(j)
          end do
          write (u, '(a,i5,a)') 'y_coordinates ', nyv, ' double'
          do k = chunks(c) % field % y_min, (chunks(c) % field % y_max + 1)
            write (u, '(e12.4)') chunks(c) % field % vertexy(k)
          end do
          write (u, '(a)') 'z_coordinates 1 double'
          write (u, '(a)') '0'
          write (u, '(a,i20)') 'cell_data ', (nxc * nyc)
          write (u, '(a)') 'field fielddata 4'
          write (u, '(a,i20,a)') 'density 1 ', (nxc * nyc), ' double'
          do k = chunks(c) % field % y_min, chunks(c) % field % y_max
            write (u, '(e12.4)') chunks(c) % field % density0(j, k), j = chunks(c) % field % x_min, chunks(c) % field % x_max
          end do
          write (u, '(a,i20,a)') 'energy 1 ', (nxc * nyc), ' double'
          do k = chunks(c) % field % y_min, chunks(c) % field % y_max
            write (u, '(e12.4)') chunks(c) % field % energy0(j, k), j = chunks(c) % field % x_min, chunks(c) % field % x_max
          end do
          write (u, '(a,i20,a)') 'pressure 1 ', (nxc * nyc), ' double'
          do k = chunks(c) % field % y_min, chunks(c) % field % y_max
            write (u, '(e12.4)') chunks(c) % field % pressure(j, k), j = chunks(c) % field % x_min, chunks(c) % field % x_max
          end do
          write (u, '(a,i20,a)') 'viscosity 1 ', (nxc * nyc), ' double'
          do k = chunks(c) % field % y_min, chunks(c) % field % y_max
            do j = chunks(c) % field % x_min, chunks(c) % field % x_max
              temp_var = 0.0
              if ((chunks(c) % field % viscosity(j, k) > 0.00000001)) temp_var = chunks(c) % field % viscosity(j, k)
              write (u, '(e12.4)') temp_var
            end do
          end do
          write (u, '(a,i20)') 'point_data ', (nxv * nyv)
          write (u, '(a)') 'field fielddata 2'
          write (u, '(a,i20,a)') 'x_vel 1 ', (nxv * nyv), ' double'
          do k = chunks(c) % field % y_min, (chunks(c) % field % y_max + 1)
            do j = chunks(c) % field % x_min, (chunks(c) % field % x_max + 1)
              temp_var = 0.0
              if ((abs(chunks(c) % field % xvel0(j, k)) > 0.00000001)) temp_var = chunks(c) % field % xvel0(j, k)
              write (u, '(e12.4)') temp_var
            end do
          end do
          write (u, '(a,i20,a)') 'y_vel 1 ', (nxv * nyv), ' double'
          do k = chunks(c) % field % y_min, (chunks(c) % field % y_max + 1)
            do j = chunks(c) % field % x_min, (chunks(c) % field % x_max + 1)
              temp_var = 0.0
              if ((abs(chunks(c) % field % yvel0(j, k)) > 0.00000001)) temp_var = chunks(c) % field % yvel0(j, k)
              write (u, '(e12.4)') temp_var
            end do
          end do
          close (u)
        end if
      end do
haha 
      do j = chunks(c) % field % x_min, (chunks(c) % field % x_max + 1)
        write (u, '(e12.4)') chunks(c) % field % vertexx(j)
      end do
haha 
      do k = chunks(c) % field % y_min, (chunks(c) % field % y_max + 1)
        write (u, '(e12.4)') chunks(c) % field % vertexy(k)
      end do
haha 
      do k = chunks(c) % field % y_min, chunks(c) % field % y_max
        write (u, '(e12.4)') chunks(c) % field % density0(j, k), j = chunks(c) % field % x_min, chunks(c) % field % x_max
      end do
haha 
      do k = chunks(c) % field % y_min, chunks(c) % field % y_max
        write (u, '(e12.4)') chunks(c) % field % energy0(j, k), j = chunks(c) % field % x_min, chunks(c) % field % x_max
      end do
haha 
      do k = chunks(c) % field % y_min, chunks(c) % field % y_max
        write (u, '(e12.4)') chunks(c) % field % pressure(j, k), j = chunks(c) % field % x_min, chunks(c) % field % x_max
      end do
haha 
      do k = chunks(c) % field % y_min, chunks(c) % field % y_max
        do j = chunks(c) % field % x_min, chunks(c) % field % x_max
          temp_var = 0.0
          if ((chunks(c) % field % viscosity(j, k) > 0.00000001)) temp_var = chunks(c) % field % viscosity(j, k)
          write (u, '(e12.4)') temp_var
        end do
      end do
haha 
      do k = chunks(c) % field % y_min, (chunks(c) % field % y_max + 1)
        do j = chunks(c) % field % x_min, (chunks(c) % field % x_max + 1)
          temp_var = 0.0
          if ((abs(chunks(c) % field % xvel0(j, k)) > 0.00000001)) temp_var = chunks(c) % field % xvel0(j, k)
          write (u, '(e12.4)') temp_var
        end do
      end do
haha 
      do k = chunks(c) % field % y_min, (chunks(c) % field % y_max + 1)
        do j = chunks(c) % field % x_min, (chunks(c) % field % x_max + 1)
          temp_var = 0.0
          if ((abs(chunks(c) % field % yvel0(j, k)) > 0.00000001)) temp_var = chunks(c) % field % yvel0(j, k)
          write (u, '(e12.4)') temp_var
        end do
      end do
haha 
matches10
/Users/remywang/metalift/txl/stng/allbench//reset_field.f90
      do c = 1, number_of_chunks
        if ((chunks(c) % task == parallel % task)) then
          if (use_fortran_kernels) then
            reset_field_kernel (chunks(c) % field % x_min, chunks(c) % field % x_max, chunks(c) % field % y_min, chunks(c) % field % y_max, chunks(c) % field % density0, chunks(c) % field % density1, chunks(c) % field % energy0, chunks(c) % field % energy1, chunks(c) % field % xvel0, chunks(c) % field % xvel1, chunks(c) % field % yvel0, chunks(c) % field % yvel1)
          else if (use_c_kernels) then
            reset_field_kernel_c (chunks(c) % field % x_min, chunks(c) % field % x_max, chunks(c) % field % y_min, chunks(c) % field % y_max, chunks(c) % field % density0, chunks(c) % field % density1, chunks(c) % field % energy0, chunks(c) % field % energy1, chunks(c) % field % xvel0, chunks(c) % field % xvel1, chunks(c) % field % yvel0, chunks(c) % field % yvel1)
          end if
        end if
      end do
haha 
matches1
/Users/remywang/metalift/txl/stng/allbench//field_summary_kernel.f90
      do k = y_min, y_max
        do j = x_min, x_max
          vsqrd = 0.0
          do kv = k, (k + 1)
            do jv = j, (j + 1)
              vsqrd = (vsqrd + (0.25 * ((xvel0(jv, kv) ** 2) + (yvel0(jv, kv) ** 2))))
            end do
          end do
          cell_vol = volume(j, k)
          cell_mass = (cell_vol * density0(j, k))
          vol = (vol + cell_vol)
          mass = (mass + cell_mass)
          ie = (ie + (cell_mass * energy0(j, k)))
          ke = (ke + ((cell_mass * 0.5) * vsqrd))
          press = (press + (cell_vol * pressure(j, k)))
        end do
      end do
haha 
      do kv = k, (k + 1)
        do jv = j, (j + 1)
          vsqrd = (vsqrd + (0.25 * ((xvel0(jv, kv) ** 2) + (yvel0(jv, kv) ** 2))))
        end do
      end do
haha 
      do jv = j, (j + 1)
        vsqrd = (vsqrd + (0.25 * ((xvel0(jv, kv) ** 2) + (yvel0(jv, kv) ** 2))))
      end do
haha 
matches3
/Users/remywang/metalift/txl/stng/allbench//calc_dt_kernel.f90
      do k = y_min, y_max
        do j = x_min, x_max
          dsx = celldx(j)
          dsy = celldy(k)
          cc = (soundspeed(j, k) * soundspeed(j, k))
          cc = (cc + ((2.0 * viscosity_a(j, k)) / density0(j, k)))
          cc = max(sqrt(cc), g_small)
          dtct = ((dtc_safe * min(dsx, dsy)) / cc)
          div = 0.0
          dv1 = ((xvel0(j, k) + xvel0(j, (k + 1))) * xarea(j, k))
          dv2 = ((xvel0((j + 1), k) + xvel0((j + 1), (k + 1))) * xarea((j + 1), k))
          div = ((div + dv2) - dv1)
          dtut = (((dtu_safe * 2.0) * volume(j, k)) / max(abs(dv1), abs(dv2), (g_small * volume(j, k))))
          dv1 = ((yvel0(j, k) + yvel0((j + 1), k)) * yarea(j, k))
          dv2 = ((yvel0(j, (k + 1)) + yvel0((j + 1), (k + 1))) * yarea(j, (k + 1)))
          div = ((div + dv2) - dv1)
          dtvt = (((dtv_safe * 2.0) * volume(j, k)) / max(abs(dv1), abs(dv2), (g_small * volume(j, k))))
          div = (div / (2.0 * volume(j, k)))
          if ((div < - g_small)) then
            dtdivt = (dtdiv_safe * (- 1.0 / div))
          else
            dtdivt = g_big
          end if
          dt_min(j, k) = min(dtct, dtut, dtvt, dtdivt)
        end do
      end do
haha 
      do k = y_min, y_max
        do j = x_min, x_max
          if ((dt_min(j, k) < dt_min_val)) dt_min_val = dt_min(j, k)
        end do
      end do
haha 
      do j = x_min, x_max
        if ((dt_min(j, k) < dt_min_val)) dt_min_val = dt_min(j, k)
      end do
haha 
matches3
/Users/remywang/metalift/txl/stng/allbench//revert_kernel.f90
      do k = y_min, y_max
        do j = x_min, x_max
          density1(j, k) = density0(j, k)
        end do
      end do
haha 
      do j = x_min, x_max
        density1(j, k) = density0(j, k)
      end do
haha 
      do k = y_min, y_max
        do j = x_min, x_max
          energy1(j, k) = energy0(j, k)
        end do
      end do
haha 
      do j = x_min, x_max
        energy1(j, k) = energy0(j, k)
      end do
haha 
matches4
/Users/remywang/metalift/txl/stng/allbench//generate_chunk_kernel.f90
      do k = (y_min - 2), (y_max + 2)
        do j = (x_min - 2), (x_max + 2)
          energy0(j, k) = state_energy(1)
        end do
      end do
haha 
      do j = (x_min - 2), (x_max + 2)
        energy0(j, k) = state_energy(1)
      end do
haha 
      do k = (y_min - 2), (y_max + 2)
        do j = (x_min - 2), (x_max + 2)
          density0(j, k) = state_density(1)
        end do
      end do
haha 
      do j = (x_min - 2), (x_max + 2)
        density0(j, k) = state_density(1)
      end do
haha 
      do k = (y_min - 2), (y_max + 2)
        do j = (x_min - 2), (x_max + 2)
          xvel0(j, k) = state_xvel(1)
        end do
      end do
haha 
      do j = (x_min - 2), (x_max + 2)
        xvel0(j, k) = state_xvel(1)
      end do
haha 
      do k = (y_min - 2), (y_max + 2)
        do j = (x_min - 2), (x_max + 2)
          yvel0(j, k) = state_yvel(1)
        end do
      end do
haha 
      do j = (x_min - 2), (x_max + 2)
        yvel0(j, k) = state_yvel(1)
      end do
haha 
      do k = (y_min - 2), (y_max + 2)
        do j = (x_min - 2), (x_max + 2)
          if ((state_geometry(state) == g_rect)) then
            if (((vertexx((j + 1)) >= state_xmin(state)) .and. (vertexx(j) < state_xmax(state)))) then
              if (((vertexy((k + 1)) >= state_ymin(state)) .and. (vertexy(k) < state_ymax(state)))) then
                energy0(j, k) = state_energy(state)
                density0(j, k) = state_density(state)
                do kt = k, (k + 1)
                  do jt = j, (j + 1)
                    xvel0(jt, kt) = state_xvel(state)
                    yvel0(jt, kt) = state_yvel(state)
                  end do
                end do
              end if
            end if
          else if ((state_geometry(state) == g_circ)) then
            radius = sqrt((((cellx(j) - x_cent) * (cellx(j) - x_cent)) + ((celly(k) - y_cent) * (celly(k) - y_cent))))
            if ((radius <= state_radius(state))) then
              energy0(j, k) = state_energy(state)
              density0(j, k) = state_density(state)
              do kt = k, (k + 1)
                do jt = j, (j + 1)
                  xvel0(jt, kt) = state_xvel(state)
                  yvel0(jt, kt) = state_yvel(state)
                end do
              end do
            end if
          else if ((state_geometry(state) == g_point)) then
            if (((vertexx(j) == x_cent) .and. (vertexy(k) == y_cent))) then
              energy0(j, k) = state_energy(state)
              density0(j, k) = state_density(state)
              do kt = k, (k + 1)
                do jt = j, (j + 1)
                  xvel0(jt, kt) = state_xvel(state)
                  yvel0(jt, kt) = state_yvel(state)
                end do
              end do
            end if
          end if
        end do
      end do
haha 
      do j = (x_min - 2), (x_max + 2)
        if ((state_geometry(state) == g_rect)) then
          if (((vertexx((j + 1)) >= state_xmin(state)) .and. (vertexx(j) < state_xmax(state)))) then
            if (((vertexy((k + 1)) >= state_ymin(state)) .and. (vertexy(k) < state_ymax(state)))) then
              energy0(j, k) = state_energy(state)
              density0(j, k) = state_density(state)
              do kt = k, (k + 1)
                do jt = j, (j + 1)
                  xvel0(jt, kt) = state_xvel(state)
                  yvel0(jt, kt) = state_yvel(state)
                end do
              end do
            end if
          end if
        else if ((state_geometry(state) == g_circ)) then
          radius = sqrt((((cellx(j) - x_cent) * (cellx(j) - x_cent)) + ((celly(k) - y_cent) * (celly(k) - y_cent))))
          if ((radius <= state_radius(state))) then
            energy0(j, k) = state_energy(state)
            density0(j, k) = state_density(state)
            do kt = k, (k + 1)
              do jt = j, (j + 1)
                xvel0(jt, kt) = state_xvel(state)
                yvel0(jt, kt) = state_yvel(state)
              end do
            end do
          end if
        else if ((state_geometry(state) == g_point)) then
          if (((vertexx(j) == x_cent) .and. (vertexy(k) == y_cent))) then
            energy0(j, k) = state_energy(state)
            density0(j, k) = state_density(state)
            do kt = k, (k + 1)
              do jt = j, (j + 1)
                xvel0(jt, kt) = state_xvel(state)
                yvel0(jt, kt) = state_yvel(state)
              end do
            end do
          end if
        end if
      end do
haha 
      do kt = k, (k + 1)
        do jt = j, (j + 1)
          xvel0(jt, kt) = state_xvel(state)
          yvel0(jt, kt) = state_yvel(state)
        end do
      end do
haha 
      do kt = k, (k + 1)
        do jt = j, (j + 1)
          xvel0(jt, kt) = state_xvel(state)
          yvel0(jt, kt) = state_yvel(state)
        end do
      end do
haha 
      do kt = k, (k + 1)
        do jt = j, (j + 1)
          xvel0(jt, kt) = state_xvel(state)
          yvel0(jt, kt) = state_yvel(state)
        end do
      end do
haha 
matches13
/Users/remywang/metalift/txl/stng/allbench//PdV.f90
      do c = 1, number_of_chunks
        if ((chunks(c) % task == parallel % task)) then
          if (use_fortran_kernels) then
            pdv_kernel (predict, chunks(c) % field % x_min, chunks(c) % field % x_max, chunks(c) % field % y_min, chunks(c) % field % y_max, dt, chunks(c) % field % xarea, chunks(c) % field % yarea, chunks(c) % field % volume, chunks(c) % field % density0, chunks(c) % field % density1, chunks(c) % field % energy0, chunks(c) % field % energy1, chunks(c) % field % pressure, chunks(c) % field % viscosity, chunks(c) % field % xvel0, chunks(c) % field % xvel1, chunks(c) % field % yvel0, chunks(c) % field % yvel1, chunks(c) % field % work_array1)
          else if (use_c_kernels) then
            if (predict) then
              prdct = 0
            else
              prdct = 1
            end if
            pdv_kernel_c (prdct, chunks(c) % field % x_min, chunks(c) % field % x_max, chunks(c) % field % y_min, chunks(c) % field % y_max, dt, chunks(c) % field % xarea, chunks(c) % field % yarea, chunks(c) % field % volume, chunks(c) % field % density0, chunks(c) % field % density1, chunks(c) % field % energy0, chunks(c) % field % energy1, chunks(c) % field % pressure, chunks(c) % field % viscosity, chunks(c) % field % xvel0, chunks(c) % field % xvel1, chunks(c) % field % yvel0, chunks(c) % field % yvel1, chunks(c) % field % work_array1)
          end if
        end if
      end do
haha 
      do c = 1, number_of_chunks
        ideal_gas (c, .true.)
      end do
haha 
matches2
/Users/remywang/metalift/txl/stng/allbench//pack_kernel.f90
      do k = (y_min - depth), ((y_max + y_inc) + depth)
        do j = 1, depth
          index = (j + (((k + depth) - 1) * depth))
          left_snd_buffer(index) = field((((x_min + x_inc) - 1) + j), k)
        end do
      end do
haha 
      do k = (y_min - depth), ((y_max + y_inc) + depth)
        do j = 1, depth
          index = (j + (((k + depth) - 1) * depth))
          right_snd_buffer(index) = field(((x_max + 1) - j), k)
        end do
      end do
haha 
      do k = (y_min - depth), ((y_max + y_inc) + depth)
        do j = 1, depth
          index = (j + (((k + depth) - 1) * depth))
          field((x_min - j), k) = left_rcv_buffer(index)
        end do
      end do
haha 
      do k = (y_min - depth), ((y_max + y_inc) + depth)
        do j = 1, depth
          index = (j + (((k + depth) - 1) * depth))
          field(((x_max + x_inc) + j), k) = right_rcv_buffer(index)
        end do
      end do
haha 
      do k = 1, depth
        do j = (x_min - depth), ((x_max + x_inc) + depth)
          index = ((j + depth) + ((k - 1) * ((x_max + x_inc) + (2 * depth))))
          bottom_snd_buffer(index) = field(j, (((y_min + y_inc) - 1) + k))
        end do
      end do
haha 
      do k = 1, depth
        do j = (x_min - depth), ((x_max + x_inc) + depth)
          index = ((j + depth) + ((k - 1) * ((x_max + x_inc) + (2 * depth))))
          top_snd_buffer(index) = field(j, ((y_max + 1) - k))
        end do
      end do
haha 
      do k = 1, depth
        do j = (x_min - depth), ((x_max + x_inc) + depth)
          index = ((j + depth) + ((k - 1) * ((x_max + x_inc) + (2 * depth))))
          field(j, (y_min - k)) = bottom_rcv_buffer(index)
        end do
      end do
haha 
      do k = 1, depth
        do j = (x_min - depth), ((x_max + x_inc) + depth)
          index = ((j + depth) + ((k - 1) * ((x_max + x_inc) + (2 * depth))))
          field(j, ((y_max + y_inc) + k)) = top_rcv_buffer(index)
        end do
      end do
haha 
matches8
/Users/remywang/metalift/txl/stng/allbench//parse.f90
      do i = 1, len_trim(l)
        if (((iachar(l(i:)) < 32) .or. (iachar(l(i:i)) > 128))) l(i:i) = ' '
      end do
haha 
      do i = 1, len(l)
        if (((iachar(l(i:i)) > 64) .and. (iachar(l(i:i)) < 91))) l(i:i) = achar((iachar(l(i:i)) + 32))
      end do
haha 
      do i = 1, len(l)
        if (((l(i:i) == '=') .or. (l(i:i) == ','))) l(i:i) = ' '
      end do
haha 
      do i = 1, (len_trim(string) - l)
        if ((string(i:(i + l)) == set_temp)) then
          temp = i
          exit
        end if
      end do
haha 
matches4
/Users/remywang/metalift/txl/stng/allbench//start.f90
      do c = 1, number_of_chunks
        if ((chunks(c) % task == parallel % task)) then
          clover_allocate_buffers (c)
        end if
      end do
haha 
      do c = 1, number_of_chunks
        if ((chunks(c) % task == parallel % task)) then
          initialise_chunk (c)
        end if
      end do
haha 
      do c = 1, number_of_chunks
        if ((chunks(c) % task == parallel % task)) then
          generate_chunk (c)
        end if
      end do
haha 
      do c = 1, number_of_chunks
        ideal_gas (c, .false.)
      end do
haha 
matches4
/Users/remywang/metalift/txl/stng/allbench//accelerate_kernel.f90
      do k = y_min, (y_max + 1)
        do j = x_min, (x_max + 1)
          nodal_mass = (((((density0((j - 1), (k - 1)) * volume((j - 1), (k - 1))) + (density0(j, (k - 1)) * volume(j, (k - 1)))) + (density0(j, k) * volume(j, k))) + (density0((j - 1), k) * volume((j - 1), k))) * 0.25)
          stepbymass(j, k) = ((0.5 * dt) / nodal_mass)
        end do
      end do
haha 
      do k = y_min, (y_max + 1)
        do j = x_min, (x_max + 1)
          xvel1(j, k) = (xvel0(j, k) - (stepbymass(j, k) * ((xarea(j, k) * (pressure(j, k) - pressure((j - 1), k))) + (xarea(j, (k - 1)) * (pressure(j, (k - 1)) - pressure((j - 1), (k - 1)))))))
        end do
      end do
haha 
      do j = x_min, (x_max + 1)
        xvel1(j, k) = (xvel0(j, k) - (stepbymass(j, k) * ((xarea(j, k) * (pressure(j, k) - pressure((j - 1), k))) + (xarea(j, (k - 1)) * (pressure(j, (k - 1)) - pressure((j - 1), (k - 1)))))))
      end do
haha 
      do k = y_min, (y_max + 1)
        do j = x_min, (x_max + 1)
          yvel1(j, k) = (yvel0(j, k) - (stepbymass(j, k) * ((yarea(j, k) * (pressure(j, k) - pressure(j, (k - 1)))) + (yarea((j - 1), k) * (pressure((j - 1), k) - pressure((j - 1), (k - 1)))))))
        end do
      end do
haha 
      do j = x_min, (x_max + 1)
        yvel1(j, k) = (yvel0(j, k) - (stepbymass(j, k) * ((yarea(j, k) * (pressure(j, k) - pressure(j, (k - 1)))) + (yarea((j - 1), k) * (pressure((j - 1), k) - pressure((j - 1), (k - 1)))))))
      end do
haha 
      do k = y_min, (y_max + 1)
        do j = x_min, (x_max + 1)
          xvel1(j, k) = (xvel1(j, k) - (stepbymass(j, k) * ((xarea(j, k) * (viscosity(j, k) - viscosity((j - 1), k))) + (xarea(j, (k - 1)) * (viscosity(j, (k - 1)) - viscosity((j - 1), (k - 1)))))))
        end do
      end do
haha 
      do j = x_min, (x_max + 1)
        xvel1(j, k) = (xvel1(j, k) - (stepbymass(j, k) * ((xarea(j, k) * (viscosity(j, k) - viscosity((j - 1), k))) + (xarea(j, (k - 1)) * (viscosity(j, (k - 1)) - viscosity((j - 1), (k - 1)))))))
      end do
haha 
      do k = y_min, (y_max + 1)
        do j = x_min, (x_max + 1)
          yvel1(j, k) = (yvel1(j, k) - (stepbymass(j, k) * ((yarea(j, k) * (viscosity(j, k) - viscosity(j, (k - 1)))) + (yarea((j - 1), k) * (viscosity((j - 1), k) - viscosity((j - 1), (k - 1)))))))
        end do
      end do
haha 
      do j = x_min, (x_max + 1)
        yvel1(j, k) = (yvel1(j, k) - (stepbymass(j, k) * ((yarea(j, k) * (viscosity(j, k) - viscosity(j, (k - 1)))) + (yarea((j - 1), k) * (viscosity((j - 1), k) - viscosity((j - 1), (k - 1)))))))
      end do
haha 
matches9
/Users/remywang/metalift/txl/stng/allbench//advec_cell_kernel.f90
      do k = (y_min - 2), (y_max + 2)
        do j = (x_min - 2), (x_max + 2)
          pre_vol(j, k) = (volume(j, k) + (((vol_flux_x((j + 1), k) - vol_flux_x(j, k)) + vol_flux_y(j, (k + 1))) - vol_flux_y(j, k)))
          post_vol(j, k) = (pre_vol(j, k) - (vol_flux_x((j + 1), k) - vol_flux_x(j, k)))
        end do
      end do
haha 
      do k = (y_min - 2), (y_max + 2)
        do j = (x_min - 2), (x_max + 2)
          pre_vol(j, k) = ((volume(j, k) + vol_flux_x((j + 1), k)) - vol_flux_x(j, k))
          post_vol(j, k) = volume(j, k)
        end do
      end do
haha 
      do k = y_min, y_max
        do j = x_min, (x_max + 2)
          if ((vol_flux_x(j, k) > 0.0)) then
            upwind = (j - 2)
            donor = (j - 1)
            downwind = j
            dif = donor
          else
            upwind = min((j + 1), (x_max + 2))
            donor = j
            downwind = (j - 1)
            dif = upwind
          end if
          sigmat = (abs(vol_flux_x(j, k)) / pre_vol(donor, k))
          sigma3 = ((1.0 + sigmat) * (vertexdx(j) / vertexdx(dif)))
          sigma4 = (2.0 - sigmat)
          sigma = sigmat
          sigmav = sigmat
          diffuw = (density1(donor, k) - density1(upwind, k))
          diffdw = (density1(downwind, k) - density1(donor, k))
          wind = 1.0
          if ((diffdw <= 0.0)) wind = - 1.0
          if (((diffuw * diffdw) > 0.0)) then
            limiter = (((1.0 - sigmav) * wind) * min(abs(diffuw), abs(diffdw), (one_by_six * ((sigma3 * abs(diffuw)) + (sigma4 * abs(diffdw))))))
          else
            limiter = 0.0
          end if
          mass_flux_x(j, k) = (vol_flux_x(j, k) * (density1(donor, k) + limiter))
          sigmam = (abs(mass_flux_x(j, k)) / (density1(donor, k) * pre_vol(donor, k)))
          diffuw = (energy1(donor, k) - energy1(upwind, k))
          diffdw = (energy1(downwind, k) - energy1(donor, k))
          wind = 1.0
          if ((diffdw <= 0.0)) wind = - 1.0
          if (((diffuw * diffdw) > 0.0)) then
            limiter = (((1.0 - sigmam) * wind) * min(abs(diffuw), abs(diffdw), (one_by_six * ((sigma3 * abs(diffuw)) + (sigma4 * abs(diffdw))))))
          else
            limiter = 0.0
          end if
          ener_flux(j, k) = (mass_flux_x(j, k) * (energy1(donor, k) + limiter))
        end do
      end do
haha 
      do k = y_min, y_max
        do j = x_min, x_max
          pre_mass(j, k) = (density1(j, k) * pre_vol(j, k))
          post_mass(j, k) = ((pre_mass(j, k) + mass_flux_x(j, k)) - mass_flux_x((j + 1), k))
          post_ener(j, k) = ((((energy1(j, k) * pre_mass(j, k)) + ener_flux(j, k)) - ener_flux((j + 1), k)) / post_mass(j, k))
          advec_vol(j, k) = ((pre_vol(j, k) + vol_flux_x(j, k)) - vol_flux_x((j + 1), k))
          density1(j, k) = (post_mass(j, k) / advec_vol(j, k))
          energy1(j, k) = post_ener(j, k)
        end do
      end do
haha 
      do k = (y_min - 2), (y_max + 2)
        do j = (x_min - 2), (x_max + 2)
          pre_vol(j, k) = (volume(j, k) + (((vol_flux_y(j, (k + 1)) - vol_flux_y(j, k)) + vol_flux_x((j + 1), k)) - vol_flux_x(j, k)))
          post_vol(j, k) = (pre_vol(j, k) - (vol_flux_y(j, (k + 1)) - vol_flux_y(j, k)))
        end do
      end do
haha 
      do k = (y_min - 2), (y_max + 2)
        do j = (x_min - 2), (x_max + 2)
          pre_vol(j, k) = ((volume(j, k) + vol_flux_y(j, (k + 1))) - vol_flux_y(j, k))
          post_vol(j, k) = volume(j, k)
        end do
      end do
haha 
      do k = y_min, (y_max + 2)
        do j = x_min, x_max
          if ((vol_flux_y(j, k) > 0.0)) then
            upwind = (k - 2)
            donor = (k - 1)
            downwind = k
            dif = donor
          else
            upwind = min((k + 1), (y_max + 2))
            donor = k
            downwind = (k - 1)
            dif = upwind
          end if
          sigmat = (abs(vol_flux_y(j, k)) / pre_vol(j, donor))
          sigma3 = ((1.0 + sigmat) * (vertexdy(k) / vertexdy(dif)))
          sigma4 = (2.0 - sigmat)
          sigma = sigmat
          sigmav = sigmat
          diffuw = (density1(j, donor) - density1(j, upwind))
          diffdw = (density1(j, downwind) - density1(j, donor))
          wind = 1.0
          if ((diffdw <= 0.0)) wind = - 1.0
          if (((diffuw * diffdw) > 0.0)) then
            limiter = (((1.0 - sigmav) * wind) * min(abs(diffuw), abs(diffdw), (one_by_six * ((sigma3 * abs(diffuw)) + (sigma4 * abs(diffdw))))))
          else
            limiter = 0.0
          end if
          mass_flux_y(j, k) = (vol_flux_y(j, k) * (density1(j, donor) + limiter))
          sigmam = (abs(mass_flux_y(j, k)) / (density1(j, donor) * pre_vol(j, donor)))
          diffuw = (energy1(j, donor) - energy1(j, upwind))
          diffdw = (energy1(j, downwind) - energy1(j, donor))
          wind = 1.0
          if ((diffdw <= 0.0)) wind = - 1.0
          if (((diffuw * diffdw) > 0.0)) then
            limiter = (((1.0 - sigmam) * wind) * min(abs(diffuw), abs(diffdw), (one_by_six * ((sigma3 * abs(diffuw)) + (sigma4 * abs(diffdw))))))
          else
            limiter = 0.0
          end if
          ener_flux(j, k) = (mass_flux_y(j, k) * (energy1(j, donor) + limiter))
        end do
      end do
haha 
      do k = y_min, y_max
        do j = x_min, x_max
          pre_mass(j, k) = (density1(j, k) * pre_vol(j, k))
          post_mass(j, k) = ((pre_mass(j, k) + mass_flux_y(j, k)) - mass_flux_y(j, (k + 1)))
          post_ener(j, k) = ((((energy1(j, k) * pre_mass(j, k)) + ener_flux(j, k)) - ener_flux(j, (k + 1))) / post_mass(j, k))
          advec_vol(j, k) = ((pre_vol(j, k) + vol_flux_y(j, k)) - vol_flux_y(j, (k + 1)))
          density1(j, k) = (post_mass(j, k) / advec_vol(j, k))
          energy1(j, k) = post_ener(j, k)
        end do
      end do
haha 
matches8
/Users/remywang/metalift/txl/stng/allbench//ideal_gas_kernel.f90
      do k = y_min, y_max
        do j = x_min, x_max
          v = (1.0 / density(j, k))
          pressure(j, k) = (((1.4 - 1.0) * density(j, k)) * energy(j, k))
          pressurebyenergy = ((1.4 - 1.0) * density(j, k))
          pressurebyvolume = (- density(j, k) * pressure(j, k))
          sound_speed_squared = ((v * v) * ((pressure(j, k) * pressurebyenergy) - pressurebyvolume))
          soundspeed(j, k) = sqrt(sound_speed_squared)
        end do
      end do
haha 
matches1
/Users/remywang/metalift/txl/stng/allbench//flux_calc_kernel.f90
      do k = y_min, y_max
        do j = x_min, (x_max + 1)
          vol_flux_x(j, k) = (((0.25 * dt) * xarea(j, k)) * (((xvel0(j, k) + xvel0(j, (k + 1))) + xvel1(j, k)) + xvel1(j, (k + 1))))
        end do
      end do
haha 
      do j = x_min, (x_max + 1)
        vol_flux_x(j, k) = (((0.25 * dt) * xarea(j, k)) * (((xvel0(j, k) + xvel0(j, (k + 1))) + xvel1(j, k)) + xvel1(j, (k + 1))))
      end do
haha 
      do k = y_min, (y_max + 1)
        do j = x_min, x_max
          vol_flux_y(j, k) = (((0.25 * dt) * yarea(j, k)) * (((yvel0(j, k) + yvel0((j + 1), k)) + yvel1(j, k)) + yvel1((j + 1), k)))
        end do
      end do
haha 
      do j = x_min, x_max
        vol_flux_y(j, k) = (((0.25 * dt) * yarea(j, k)) * (((yvel0(j, k) + yvel0((j + 1), k)) + yvel1(j, k)) + yvel1((j + 1), k)))
      end do
haha 
matches4
/Users/remywang/metalift/txl/stng/allbench//timestep.f90
      do c = 1, number_of_chunks
        ideal_gas (c, .false.)
      end do
haha 
matches1
/Users/remywang/metalift/txl/stng/allbench//field_summary.f90
      do c = 1, number_of_chunks
        ideal_gas (c, .false.)
      end do
haha 
      do c = 1, number_of_chunks
        if ((chunks(c) % task == parallel % task)) then
          field_summary_kernel (chunks(c) % field % x_min, chunks(c) % field % x_max, chunks(c) % field % y_min, chunks(c) % field % y_max, chunks(c) % field % volume, chunks(c) % field % density0, chunks(c) % field % energy0, chunks(c) % field % pressure, chunks(c) % field % xvel0, chunks(c) % field % yvel0, vol, mass, ie, ke, press)
        end if
      end do
haha 
      do c = 1, number_of_chunks
        if ((chunks(c) % task == parallel % task)) then
          field_summary_kernel_c (chunks(c) % field % x_min, chunks(c) % field % x_max, chunks(c) % field % y_min, chunks(c) % field % y_max, chunks(c) % field % volume, chunks(c) % field % density0, chunks(c) % field % energy0, chunks(c) % field % pressure, chunks(c) % field % xvel0, chunks(c) % field % yvel0, vol, mass, ie, ke, press)
        end if
      end do
haha 
matches3
/Users/remywang/metalift/txl/stng/allbench//PdV_kernel.f90
      do k = y_min, y_max
        do j = x_min, x_max
          left_flux = ((((xarea(j, k) * (((xvel0(j, k) + xvel0(j, (k + 1))) + xvel0(j, k)) + xvel0(j, (k + 1)))) * 0.25) * dt) * 0.5)
          right_flux = ((((xarea((j + 1), k) * (((xvel0((j + 1), k) + xvel0((j + 1), (k + 1))) + xvel0((j + 1), k)) + xvel0((j + 1), (k + 1)))) * 0.25) * dt) * 0.5)
          bottom_flux = ((((yarea(j, k) * (((yvel0(j, k) + yvel0((j + 1), k)) + yvel0(j, k)) + yvel0((j + 1), k))) * 0.25) * dt) * 0.5)
          top_flux = ((((yarea(j, (k + 1)) * (((yvel0(j, (k + 1)) + yvel0((j + 1), (k + 1))) + yvel0(j, (k + 1))) + yvel0((j + 1), (k + 1)))) * 0.25) * dt) * 0.5)
          total_flux = (((right_flux - left_flux) + top_flux) - bottom_flux)
          volume_change(j, k) = (volume(j, k) / (volume(j, k) + total_flux))
          min_cell_volume = min(((((volume(j, k) + right_flux) - left_flux) + top_flux) - bottom_flux), ((volume(j, k) + right_flux) - left_flux), ((volume(j, k) + top_flux) - bottom_flux))
          recip_volume = (1.0 / volume(j, k))
          energy_change = ((((pressure(j, k) / density0(j, k)) + (viscosity(j, k) / density0(j, k))) * total_flux) * recip_volume)
          energy1(j, k) = (energy0(j, k) - energy_change)
          density1(j, k) = (density0(j, k) * volume_change(j, k))
        end do
      end do
haha 
      do k = y_min, y_max
        do j = x_min, x_max
          left_flux = (((xarea(j, k) * (((xvel0(j, k) + xvel0(j, (k + 1))) + xvel1(j, k)) + xvel1(j, (k + 1)))) * 0.25) * dt)
          right_flux = (((xarea((j + 1), k) * (((xvel0((j + 1), k) + xvel0((j + 1), (k + 1))) + xvel1((j + 1), k)) + xvel1((j + 1), (k + 1)))) * 0.25) * dt)
          bottom_flux = (((yarea(j, k) * (((yvel0(j, k) + yvel0((j + 1), k)) + yvel1(j, k)) + yvel1((j + 1), k))) * 0.25) * dt)
          top_flux = (((yarea(j, (k + 1)) * (((yvel0(j, (k + 1)) + yvel0((j + 1), (k + 1))) + yvel1(j, (k + 1))) + yvel1((j + 1), (k + 1)))) * 0.25) * dt)
          total_flux = (((right_flux - left_flux) + top_flux) - bottom_flux)
          volume_change(j, k) = (volume(j, k) / (volume(j, k) + total_flux))
          min_cell_volume = min(((((volume(j, k) + right_flux) - left_flux) + top_flux) - bottom_flux), ((volume(j, k) + right_flux) - left_flux), ((volume(j, k) + top_flux) - bottom_flux))
          recip_volume = (1.0 / volume(j, k))
          energy_change = ((((pressure(j, k) / density0(j, k)) + (viscosity(j, k) / density0(j, k))) * total_flux) * recip_volume)
          energy1(j, k) = (energy0(j, k) - energy_change)
          density1(j, k) = (density0(j, k) * volume_change(j, k))
        end do
      end do
haha 
matches2
/Users/remywang/metalift/txl/stng/allbench//clover.f90
      do c = 1, number_of_chunks
        if ((mod(number_of_chunks, c) == 0)) then
          factor_x = (number_of_chunks / real(c))
          factor_y = c
          !compare the factor ratio with the mesh ratio
          if (((factor_x / factor_y) <= mesh_ratio)) then
            chunk_y = c
            chunk_x = (number_of_chunks / c)
            split_found = 1
            exit
          end if
        end if
      end do
haha 
matches1
/Users/remywang/metalift/txl/stng/allbench//viscosity.f90
      do c = 1, number_of_chunks
        if ((chunks(c) % task == parallel % task)) then
          if (use_fortran_kernels) then
            viscosity_kernel (chunks(c) % field % x_min, chunks(c) % field % x_max, chunks(c) % field % y_min, chunks(c) % field % y_max, chunks(c) % field % celldx, chunks(c) % field % celldy, chunks(c) % field % density0, chunks(c) % field % pressure, chunks(c) % field % viscosity, chunks(c) % field % xvel0, chunks(c) % field % yvel0)
          else if (use_c_kernels) then
            viscosity_kernel_c (chunks(c) % field % x_min, chunks(c) % field % x_max, chunks(c) % field % y_min, chunks(c) % field % y_max, chunks(c) % field % celldx, chunks(c) % field % celldy, chunks(c) % field % density0, chunks(c) % field % pressure, chunks(c) % field % viscosity, chunks(c) % field % xvel0, chunks(c) % field % yvel0)
          end if
        end if
      end do
haha 
matches1
/Users/remywang/metalift/txl/stng/allbench//reset_field_kernel.f90
      do k = y_min, y_max
        do j = x_min, x_max
          density0(j, k) = density1(j, k)
        end do
      end do
haha 
      do j = x_min, x_max
        density0(j, k) = density1(j, k)
      end do
haha 
      do k = y_min, y_max
        do j = x_min, x_max
          energy0(j, k) = energy1(j, k)
        end do
      end do
haha 
      do j = x_min, x_max
        energy0(j, k) = energy1(j, k)
      end do
haha 
      do k = y_min, (y_max + 1)
        do j = x_min, (x_max + 1)
          xvel0(j, k) = xvel1(j, k)
        end do
      end do
haha 
      do j = x_min, (x_max + 1)
        xvel0(j, k) = xvel1(j, k)
      end do
haha 
      do k = y_min, (y_max + 1)
        do j = x_min, (x_max + 1)
          yvel0(j, k) = yvel1(j, k)
        end do
      end do
haha 
      do j = x_min, (x_max + 1)
        yvel0(j, k) = yvel1(j, k)
      end do
haha 
matches8
/Users/remywang/metalift/txl/stng/allbench//advec_mom_kernel.f90
      do k = (y_min - 2), (y_max + 2)
        do j = (x_min - 2), (x_max + 2)
          post_vol(j, k) = ((volume(j, k) + vol_flux_y(j, (k + 1))) - vol_flux_y(j, k))
          pre_vol(j, k) = ((post_vol(j, k) + vol_flux_x((j + 1), k)) - vol_flux_x(j, k))
        end do
      end do
haha 
      do k = (y_min - 2), (y_max + 2)
        do j = (x_min - 2), (x_max + 2)
          post_vol(j, k) = ((volume(j, k) + vol_flux_x((j + 1), k)) - vol_flux_x(j, k))
          pre_vol(j, k) = ((post_vol(j, k) + vol_flux_y(j, (k + 1))) - vol_flux_y(j, k))
        end do
      end do
haha 
      do k = (y_min - 2), (y_max + 2)
        do j = (x_min - 2), (x_max + 2)
          post_vol(j, k) = volume(j, k)
          pre_vol(j, k) = ((post_vol(j, k) + vol_flux_y(j, (k + 1))) - vol_flux_y(j, k))
        end do
      end do
haha 
      do k = (y_min - 2), (y_max + 2)
        do j = (x_min - 2), (x_max + 2)
          post_vol(j, k) = volume(j, k)
          pre_vol(j, k) = ((post_vol(j, k) + vol_flux_x((j + 1), k)) - vol_flux_x(j, k))
        end do
      end do
haha 
      do k = y_min, (y_max + 1)
        do j = (x_min - 2), (x_max + 2)
          ! find staggered mesh mass fluxes, nodal masses and volumes.
          node_flux(j, k) = (0.25 * (((mass_flux_x(j, (k - 1)) + mass_flux_x(j, k)) + mass_flux_x((j + 1), (k - 1))) + mass_flux_x((j + 1), k)))
        end do
      end do
haha 
      do k = y_min, (y_max + 1)
        do j = (x_min - 1), (x_max + 2)
          ! staggered cell mass post advection
          node_mass_post(j, k) = (0.25 * ((((density1(j, (k - 1)) * post_vol(j, (k - 1))) + (density1(j, k) * post_vol(j, k))) + (density1((j - 1), (k - 1)) * post_vol((j - 1), (k - 1)))) + (density1((j - 1), k) * post_vol((j - 1), k))))
        end do
      end do
haha 
      do k = y_min, (y_max + 1)
        do j = (x_min - 1), (x_max + 2)
          ! stagered cell mass pre advection
          node_mass_pre(j, k) = ((node_mass_post(j, k) - node_flux((j - 1), k)) + node_flux(j, k))
        end do
      end do
haha 
      do k = y_min, (y_max + 1)
        do j = (x_min - 1), (x_max + 1)
          if ((node_flux(j, k) < 0.0)) then
            upwind = (j + 2)
            donor = (j + 1)
            downwind = j
            dif = donor
          else
            upwind = (j - 1)
            donor = j
            downwind = (j + 1)
            dif = upwind
          end if
          sigma = (abs(node_flux(j, k)) / node_mass_pre(donor, k))
          width = celldx(j)
          vdiffuw = (vel1(donor, k) - vel1(upwind, k))
          vdiffdw = (vel1(downwind, k) - vel1(donor, k))
          limiter = 0.0
          if (((vdiffuw * vdiffdw) > 0.0)) then
            auw = abs(vdiffuw)
            adw = abs(vdiffdw)
            wind = 1.0
            if ((vdiffdw <= 0.0)) wind = - 1.0
            limiter = (wind * min(((width * ((((2.0 - sigma) * adw) / width) + (((1.0 + sigma) * auw) / celldx(dif)))) / 6.0), auw, adw))
          end if
          advec_vel(j, k) = (vel1(donor, k) + ((1.0 - sigma) * limiter))
          mom_flux(j, k) = (advec_vel(j, k) * node_flux(j, k))
        end do
      end do
haha 
      do k = y_min, (y_max + 1)
        do j = x_min, (x_max + 1)
          vel1(j, k) = ((((vel1(j, k) * node_mass_pre(j, k)) + mom_flux((j - 1), k)) - mom_flux(j, k)) / node_mass_post(j, k))
        end do
      end do
haha 
      do j = x_min, (x_max + 1)
        vel1(j, k) = ((((vel1(j, k) * node_mass_pre(j, k)) + mom_flux((j - 1), k)) - mom_flux(j, k)) / node_mass_post(j, k))
      end do
haha 
      do k = (y_min - 2), (y_max + 2)
        do j = x_min, (x_max + 1)
          ! find staggered mesh mass fluxes and nodal masses and volumes.
          node_flux(j, k) = (0.25 * (((mass_flux_y((j - 1), k) + mass_flux_y(j, k)) + mass_flux_y((j - 1), (k + 1))) + mass_flux_y(j, (k + 1))))
        end do
      end do
haha 
      do k = (y_min - 1), (y_max + 2)
        do j = x_min, (x_max + 1)
          node_mass_post(j, k) = (0.25 * ((((density1(j, (k - 1)) * post_vol(j, (k - 1))) + (density1(j, k) * post_vol(j, k))) + (density1((j - 1), (k - 1)) * post_vol((j - 1), (k - 1)))) + (density1((j - 1), k) * post_vol((j - 1), k))))
        end do
      end do
haha 
      do j = x_min, (x_max + 1)
        node_mass_post(j, k) = (0.25 * ((((density1(j, (k - 1)) * post_vol(j, (k - 1))) + (density1(j, k) * post_vol(j, k))) + (density1((j - 1), (k - 1)) * post_vol((j - 1), (k - 1)))) + (density1((j - 1), k) * post_vol((j - 1), k))))
      end do
haha 
      do k = (y_min - 1), (y_max + 2)
        do j = x_min, (x_max + 1)
          node_mass_pre(j, k) = ((node_mass_post(j, k) - node_flux(j, (k - 1))) + node_flux(j, k))
        end do
      end do
haha 
      do j = x_min, (x_max + 1)
        node_mass_pre(j, k) = ((node_mass_post(j, k) - node_flux(j, (k - 1))) + node_flux(j, k))
      end do
haha 
      do k = (y_min - 1), (y_max + 1)
        do j = x_min, (x_max + 1)
          if ((node_flux(j, k) < 0.0)) then
            upwind = (k + 2)
            donor = (k + 1)
            downwind = k
            dif = donor
          else
            upwind = (k - 1)
            donor = k
            downwind = (k + 1)
            dif = upwind
          end if
          sigma = (abs(node_flux(j, k)) / node_mass_pre(j, donor))
          width = celldy(k)
          vdiffuw = (vel1(j, donor) - vel1(j, upwind))
          vdiffdw = (vel1(j, downwind) - vel1(j, donor))
          limiter = 0.0
          if (((vdiffuw * vdiffdw) > 0.0)) then
            auw = abs(vdiffuw)
            adw = abs(vdiffdw)
            wind = 1.0
            if ((vdiffdw <= 0.0)) wind = - 1.0
            limiter = (wind * min(((width * ((((2.0 - sigma) * adw) / width) + (((1.0 + sigma) * auw) / celldy(dif)))) / 6.0), auw, adw))
          end if
          advec_vel(j, k) = (vel1(j, donor) + ((1.0 - sigma) * limiter))
          mom_flux(j, k) = (advec_vel(j, k) * node_flux(j, k))
        end do
      end do
haha 
      do k = y_min, (y_max + 1)
        do j = x_min, (x_max + 1)
          vel1(j, k) = ((((vel1(j, k) * node_mass_pre(j, k)) + mom_flux(j, (k - 1))) - mom_flux(j, k)) / node_mass_post(j, k))
        end do
      end do
haha 
      do j = x_min, (x_max + 1)
        vel1(j, k) = ((((vel1(j, k) * node_mass_pre(j, k)) + mom_flux(j, (k - 1))) - mom_flux(j, k)) / node_mass_post(j, k))
      end do
haha 
matches18
/Users/remywang/metalift/txl/stng/allbench//revert.f90
      do c = 1, number_of_chunks
        if ((chunks(c) % task == parallel % task)) then
          if (use_fortran_kernels) then
            revert_kernel (chunks(c) % field % x_min, chunks(c) % field % x_max, chunks(c) % field % y_min, chunks(c) % field % y_max, chunks(c) % field % density0, chunks(c) % field % density1, chunks(c) % field % energy0, chunks(c) % field % energy1)
          else if (use_c_kernels) then
            revert_kernel_c (chunks(c) % field % x_min, chunks(c) % field % x_max, chunks(c) % field % y_min, chunks(c) % field % y_max, chunks(c) % field % density0, chunks(c) % field % density1, chunks(c) % field % energy0, chunks(c) % field % energy1)
          end if
        end if
      end do
haha 
matches1
/Users/remywang/metalift/txl/stng/allbench//accelerate.f90
      do c = 1, number_of_chunks
        if ((chunks(c) % task == parallel % task)) then
          if (use_fortran_kernels) then
            accelerate_kernel (chunks(c) % field % x_min, chunks(c) % field % x_max, chunks(c) % field % y_min, chunks(c) % field % y_max, dt, chunks(c) % field % xarea, chunks(c) % field % yarea, chunks(c) % field % volume, chunks(c) % field % density0, chunks(c) % field % pressure, chunks(c) % field % viscosity, chunks(c) % field % xvel0, chunks(c) % field % yvel0, chunks(c) % field % xvel1, chunks(c) % field % yvel1, chunks(c) % field % work_array1)
          else if (use_c_kernels) then
            accelerate_kernel_c (chunks(c) % field % x_min, chunks(c) % field % x_max, chunks(c) % field % y_min, chunks(c) % field % y_max, dt, chunks(c) % field % xarea, chunks(c) % field % yarea, chunks(c) % field % volume, chunks(c) % field % density0, chunks(c) % field % pressure, chunks(c) % field % viscosity, chunks(c) % field % xvel0, chunks(c) % field % yvel0, chunks(c) % field % xvel1, chunks(c) % field % yvel1, chunks(c) % field % work_array1)
          end if
        end if
      end do
haha 
matches1
/Users/remywang/metalift/txl/stng/allbench//update_halo.f90
      do c = 1, number_of_chunks
        if ((chunks(c) % task == parallel % task)) then
          if (use_fortran_kernels) then
            update_halo_kernel (chunks(c) % field % x_min, chunks(c) % field % x_max, chunks(c) % field % y_min, chunks(c) % field % y_max, chunks(c) % chunk_neighbours, chunks(c) % field % density0, chunks(c) % field % energy0, chunks(c) % field % pressure, chunks(c) % field % viscosity, chunks(c) % field % soundspeed, chunks(c) % field % density1, chunks(c) % field % energy1, chunks(c) % field % xvel0, chunks(c) % field % yvel0, chunks(c) % field % xvel1, chunks(c) % field % yvel1, chunks(c) % field % vol_flux_x, chunks(c) % field % vol_flux_y, chunks(c) % field % mass_flux_x, chunks(c) % field % mass_flux_y, fields, depth)
          else if (use_c_kernels) then
            update_halo_kernel_c (chunks(c) % field % x_min, chunks(c) % field % x_max, chunks(c) % field % y_min, chunks(c) % field % y_max, chunks(c) % chunk_neighbours, chunks(c) % field % density0, chunks(c) % field % energy0, chunks(c) % field % pressure, chunks(c) % field % viscosity, chunks(c) % field % soundspeed, chunks(c) % field % density1, chunks(c) % field % energy1, chunks(c) % field % xvel0, chunks(c) % field % yvel0, chunks(c) % field % xvel1, chunks(c) % field % yvel1, chunks(c) % field % vol_flux_x, chunks(c) % field % vol_flux_y, chunks(c) % field % mass_flux_x, chunks(c) % field % mass_flux_y, fields, depth)
          end if
        end if
      end do
haha 
matches1
/Users/remywang/metalift/txl/stng/allbench//initialise_chunk_kernel.f90
      do j = (x_min - 2), (x_max + 3)
        vertexx(j) = (xmin + (dx * float((j - x_min))))
      end do
haha 
      do j = (x_min - 2), (x_max + 3)
        vertexdx(j) = dx
      end do
haha 
      do k = (y_min - 2), (y_max + 3)
        vertexy(k) = (ymin + (dy * float((k - y_min))))
      end do
haha 
      do k = (y_min - 2), (y_max + 3)
        vertexdy(k) = dy
      end do
haha 
      do j = (x_min - 2), (x_max + 2)
        cellx(j) = (0.5 * (vertexx(j) + vertexx((j + 1))))
      end do
haha 
      do j = (x_min - 2), (x_max + 2)
        celldx(j) = dx
      end do
haha 
      do k = (y_min - 2), (y_max + 2)
        celly(k) = (0.5 * (vertexy(k) + vertexy((k + 1))))
      end do
haha 
      do k = (y_min - 2), (y_max + 2)
        celldy(k) = dy
      end do
haha 
      do k = (y_min - 2), (y_max + 2)
        do j = (x_min - 2), (x_max + 2)
          volume(j, k) = (dx * dy)
        end do
      end do
haha 
      do j = (x_min - 2), (x_max + 2)
        volume(j, k) = (dx * dy)
      end do
haha 
      do k = (y_min - 2), (y_max + 2)
        do j = (x_min - 2), (x_max + 2)
          xarea(j, k) = celldy(k)
        end do
      end do
haha 
      do j = (x_min - 2), (x_max + 2)
        xarea(j, k) = celldy(k)
      end do
haha 
      do k = (y_min - 2), (y_max + 2)
        do j = (x_min - 2), (x_max + 2)
          yarea(j, k) = celldx(j)
        end do
      end do
haha 
      do j = (x_min - 2), (x_max + 2)
        yarea(j, k) = celldx(j)
      end do
haha 
matches14
